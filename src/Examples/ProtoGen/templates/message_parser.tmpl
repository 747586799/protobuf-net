using Google.Protobuf;
using System.IO;
@using System
@using Google.Protobuf.Reflection
@using System.Text
@{
    // Utility functions for code generation
    string GetOpcodeParser(Google.Protobuf.Reflection.DescriptorProto proto)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        GetOpcodeParserSub(sb, proto);
        return sb.ToString();
    }
    int GetMessageId(DescriptorProto proto)
    {
        // 优先读取选项值
        if (Model.TryGetOptionValue(proto, 54321, out int msgId))
            return msgId;
            
        // 备用方案：使用消息名的哈希值
        return Math.Abs(proto.Name.GetHashCode()) % 10000 + 1000; 
    }
    void GetOpcodeParserSub(System.Text.StringBuilder sb, Google.Protobuf.Reflection.DescriptorProto proto)
    {	
        int msgId = GetMessageId(proto); // 改用新方法
        sb.AppendLine($"case {msgId}:");
        sb.AppendLine($"    msg = new (){Model.GetMessageTypeName(proto)}();");
        sb.AppendLine("    break;");
        
        foreach(var i in proto.NestedTypes)
        {
           GetOpcodeParserSub(sb, i);
        }

    }
}
// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
// </auto-generated>
@if(!string.IsNullOrEmpty(@Model.Files.DefaultPackage))
{
@:namespace @Model.Files.DefaultPackage
@:{	
}
    public abstract class MessageBase
    {
        public virtual int MessageId => 0;

        public abstract void MergeFrom(CodedInputStream input);
        public abstract void WriteTo(CodedOutputStream output);        
        public byte[] ToByteArray()
        {
            using (var ms = new MemoryStream())
            {
                // 创建输出流
                CodedOutputStream cos = new CodedOutputStream(ms);

                WriteTo(cos);

                // 刷新流，确保写入完成
                cos.Flush();

                // 获取二进制数据
                return ms.ToArray();
            }
        }
        protected int memoizedSerializedSize = -1;
        public int SerializedSize 
        {
            get 
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                return CalcSerializedSize();
            }
        }

        protected abstract int CalcSerializedSize();
    }

    public abstract class ParserBase<T> where T : MessageBase
    {
        public abstract T ParseFrom(ByteString byteString);
        
        public abstract T ParseFrom(byte[] bytes);
    }
@if(!string.IsNullOrEmpty(@Model.Files.DefaultPackage))
{
@:}
}